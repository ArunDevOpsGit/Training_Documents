
#######################
Day 11: 28th July 2025
#######################				
			
	
	- Az Pipeline Services :::	

		- Build Pipeline 					# - Continuous Integration
		
		- Release Pipeline 					# - Continuous Delivery/Deployment 
		
		
	- AzPipelines are written using *.yaml scripts!
		- key:value pair.
		
		
		Application Build :::
		
			- Compile the source code and create artifacts 			
		
		
		Non-Prod 
		
			Dev Environment
			
			Build Environment :
			
				- Create Artifacts  *.war / *.exec / *.dll
			
			Target Environments :	(Deployment Group)
			
				- Test 
				
					QA 
			
					UAT 
		
				Prod Environments 	(Deployment Group)
		
					- Prod_Server1,2,3,4,5 

			
	Azure Pipelines :
	
	
		Agents :

			- Node/VM 
			
			Self-Hosted Agents 
			
			
		Azure Pipeline :
		
			- Azure Build Pipeline 
			
				- Perform Application Build in the Non-Prod Environments
			
			- Azure Release Pipeline 
			
				- Promote the Changes from Non-Prod to Prod Environment
		
			- Build Environments :
			
				- Managed Agents 
				
				- Self-Hosted Agents 



	CI/CD ==> 
	
		Scenario 1 :
		
			End-to-End Pipeline ==> Build, Create Artifacts, Test and Deploy
			
		Scenario 2 :
			
			Build Pipeline ==> Build and Create Artifacts, Test  ==> *.war / *.dll / *.exec
								
								Containerization!

			Release Pipeline ==> Promote the Changes from Non-Prod to Prod Environment
			
			
		CICD Pipeline --> Composed of various Stages(Collection Tasks)				
				
			Build Environment (VM)	-- Install the Build Tools		
				
				- Self Hosted 
					- Manually Create, Install the required Build Tools and maintain the Agent 
					- This can be reusable 
					
					Agent Pool:
						- Self Hosted Agent1 - Java Application Build --> Jdk,maven 
						- Self Hosted Agent2 - Java Application Build --> Jdk,maven 
						- Self Hosted Agent3 - Java Application Build --> Jdk,maven 
					
				- Azure Managed Agent 
				
					Agent Pool:
						- Managed Hosted Agent1 - Java Application Build --> Jdk,maven 
						- Managed Hosted Agent2 - Java Application Build --> Jdk,maven 
						- Managed Hosted Agent3 - Java Application Build --> Jdk,maven 	
		
			Service Connections - Used to Access the external services 	
			
			
	- Non-Containerized Application 
	
		1. Developer Created the Source Code 
		2. Commit the Changes to Source Code Repository (github/AzRepos)
		
	Using DevOps CICD Pipeline :
	
		1. SCM_Checkout --> Download the SourceCode from Source Code Repository to Build Environment
		2. Application Build (Compile the source code and create artifacts -  mywebapp.war)
		3. Unit Test 
		4. Promote the Application Artifacts to QA Environment
		5. Automated QA Testing (Testing Team) - Reg/Func/Perf/Integration
		6. Promote the Application Artifacts to UAT Environment
		7. Automated/Manual UAT Testing (Done by the Business Users)
	
		8. Promote the Application Artifacts to Prod Environment


	- Containerized Applications : Docker & Kubernetes
	
		1. Developer Created the Source Code 
		2. Commit the Changes to Source Code Repository (github/AzRepos)
		
	Using DevOps CICD Pipeline :
	
		1. SCM_Checkout --> Download the SourceCode from Source Code Repository to Build Environment
		2. Application Build (Compile the source code and create artifacts -  mywebapp.war)
		2.1 Applications Container Image Build using ACS - mywebapp_image:v1.1
		2.2 Publish the Container Image to Container Registry using ACR
		3. Unit Test 
		4. Deploy the Application Container Images to QA Environment
		5. Automated QA Testing (Testing Team)
		6. Deploy the Application Container Images to UAT Environment
		7. Automated/Manual UAT Testing (Done by the Business Users)
	
		8. Deploy the Application Container Images to Prod Environment	
		
		
		
	Container ?
	
		Containerization :::
		
			-> It is a process of packaging the application along with its dependencies
			
			
	Developers' / Deployment Perspective :::
	
		Role :
		
			Dev Environment :
			
				- Create Source Code 
				
				- Build 				--> mywebapp.war 
				
				Using Containerization :
				
				Package the application : (mywebapp.war,jdk_v11,Tomcat_v8)	==> mywebapp_img:v1.0
				
				
				Publish the Container Image to Container Registry(DockerHub/ACR)
				
			QA-Test Server :
			
			
				pull Container Image from Container Registry(DockerHub/ACR)
				
				Create Application Container 
	

			UAT-Test Server :
			
			
				pull Container Image from Container Registry(DockerHub/ACR)
				
				Create Application Container 


			Prod-Test Server :
			
			
				pull Container Image from Container Registry(DockerHub/ACR)
				
				Create Application Container 				
	
			
			
		Container Image :
		
			- It is static file that composed of various layers 
			- Non-Executable 
			- Dockerfile - composed of various Instructions to build an Image.
			
		Container :
		
			- Executable entity of Container Images 
			
			
		Terminologies :
		
			- Container Engine 			# To Create/Manage the Containers
			
			- Container Image 	
							- It is static file that composed of various layers 
							- Non-Executable 
							- Dockerfile - composed of various Instructions to build an Image.
							
			- Container
							- Executable entity of Container Images 

							
			- Container Registry 
							- Version Control / Maintain the Container Images 
							- (DockerHub/ACR)
							
			
			- Container Repository
			
							- Subset of Container Registry
							
							
							
			
			Version Control Source Code					==> 	Artifactory Libraries 			==> 	Container Registries
			
				- GitHub/AzRepos								- Jfrog/AzArtifact						- DockerHub/AzContainer Registry
				
					mywebapp.jsp_v1.1					==>		    mywebapp.war_v1.1			==> 	   mywebapp-Img_v1.1	
					mywebapp.jsp_v1.2					==>		    mywebapp.war_v1.2			==> 	   mywebapp-Img_v1.2				
					mywebapp.jsp_v1.3					==>		    mywebapp.war_v1.3			==> 	   mywebapp-Img_v1.3				
			

	
	
	Configure Build Environment (VM)	-- Install the Build Tools		
		
		- Launch a AzVM
		
		- Login to AzVM 
				- Access/Connect to AzVM using MobaXterm/Putty(SSH Agent) 
				
					Parameters to access remote server using SSH:
					
						- Target Host Name				# Public IP : 20.244.24.106
						- User Name						# azureuser 
						- User Credentials		
							- Key Based Authencation 	# *.pem
		
		
		- Install required build tools :::
		
				
				- Manage Linux Packages/Users/Remote Servers/Files 
			
			Java Maven/gradle Web Applications :
			
				- git 
				
				- jdk 
				
				- maven 
				
				- docker 


Login to Linux Server :

- Elevate the access to root user.

- As a linux root, manage the packages!

- Linux Package Manager to install/uninstall/upgrade the Linux packages!

- The package managers are based on the Linux Distributions 

- The package managers are executed only as a root user by default


	Distributions 						Package Manager 
	
		- Debian/Ubuntu 					==> apt/apt-get 
	
		- centos/RHEL						==> yum 
	
		- Fedora							==> dnf


sudo -i

apt update -y 

#Install Java ::

sudo apt update -y 
sudo apt install openjdk-17-jre -y
java -version						

#Install GIT :

sudo apt install git -y			
git --version 

#Install Maven - Build Tool :
#https://maven.apache.org/install.html

sudo apt install maven -y 

mvn --version

#Add User : 

useradd devopsadmin -s /bin/bash -m -d /home/devopsadmin

su - devopsadmin

#ssh-keygen

#for Ubuntu ::
#ssh-keygen -t rsa -b 2048 -m PEM								#ubuntu 20.04

ssh-keygen -t ecdsa -b 521										#ubuntu 22.04 or higher version of ubuntu				


ls ~/.ssh 

#You should see following two files:

#id_ecdsa - private key
#id_ecdsa.pub - public


#cat id_rsa.pub > authorized_keys

cat id_ecdsa.pub > authorized_keys

chmod 600 /home/devopsadmin/.ssh/*


Maven --> Java Application Build Tool :

- Perform Java maven Application Build (Compile,Test,Create Artifacts)

- Pre-requisites :

	- POM.XML File 				#	Should be maintained in the Source Code Repository by the Developers!
								# 	It is used to define the properties of maven application build 
								#	It is used to define all the dependencies and plugins required to build the maven applications.
								
								
	- Maven Goals :
	
		- Compile 				# 	mvn compile - Compile the Source Code and produce the compilation results
		- Test 					# 	mvn test 	- To Perform: Compile and Unit Test. 
		- Create Artifacts 		# 	mvn package - To Perform: Compile, Unit Test and Package(Create Artifacts)
		
		
		- The Packages by default gets created in the target/ folder of the project workspace!
		
					target/*.war			# out come of application build!
								
https://github.com/SK-AZ-400-1407/java-webapp-project.git


To Deploy any Micro-Service Based Application Services 

	- Docker 
	
	- Kubernetes 
	
	Working Docker :::
	
		- Access to Contiainer Registry 
		
		- Using Docker Cli Commands 
		
			- To Access Container Images from Container Registries(DockerHub/AzCR)
			
			- To Create Container Images based on the Application Artifacts and dependencies
			
			- To Execute/Run the Containers based on the Container Images 
			
			- To Publish the Container Images to Container Registries(DockerHub/AzCR)
			
		
			- Login to the running Containers 
			
			- Capture the Container Execution Logs
			
			- Share the Container Logs with the Application teams 


	Install Docker Engine in the Build Server:
		
		- sudo -i 
		
		- apt install docker.io -y
		
	
	Docker Cli Commands :
	
		
		- docker images 				# To get the list of docker images in the local machine 

		- docker ps 					# To get the list of all active docker containers 
		
		- docker ps -a 					# To get the list of all active/inactive docker containers 
		
		

Next :

	- Work with Docker Cli Commands 



	
#######################
Day 12: 29th July 2025
#######################		

	
	- Work with Docker Cli Commands ::
	
	- Working with Container Registries :
	
		- DockerHub 
		
		- Azure Container Registry


	usermod -aG docker devopsadmin
	
	
	Docker Cli Commands :
	
		- docker images 					# To get the list of docker images in the local machine 

		- docker ps 						# To get the list of all active docker containers 
		
		- docker ps -a 						# To get the list of all active/inactive docker containers 
		
		- docker pull <Container_Image>		# Download latest version an Image from Container Registry 

		- docker pull alpine:3.22.1			# Download specific version of an Image from Container Registry 
		
		- docker run <Container_Image>		# To Create and run the Container based on the Container Image
		
		
		- Three Modes of Container Execution :
		
			- Foreground/Attached Mode 	:											# Default
			
				- It executed in active Terminal 
				
				Eg.: 
				
					docker run ubuntu sleep 20 				
			
			- Background/Detached Mode :
			
				Eg.: 
				
					docker run -d ubuntu sleep 20 					
			
			- Interactive Mode :
			
				Eg.: 
		
					- docker run -it ubuntu bash
					
					- exit 						# Exit Container running in interactive mode 
		
		
			- Start a Container :
			
					- docker start <container_id>
		
			- Login to running Contianer ::
			
					- docker exec -it <Container_ID> bash
				
					- docker exec -it ffdcc671fb70 bash
					
					- exit 						# Logoff
					
			- Stop a Container :
			
					- docker stop <container_id>	
					
			- kill Container 
			
					- docker kill <container_id>
					
					
			- Delete Container / Image ::
			
			
				docker rmi <image_id> 				# Remove/Delete Container Image from Local Machine
				
				docker rm <container_id>			# Remove/Delete Container from Local Machine


		Port Mapping!
		
			==> Is used to map the Container Port with the Host Port 
			
					-p host_port:container_port
			
					docker run -it -p 8085:8080 tomcat:8.0				
					
					docker run -it -p 8086:80 nginx:latest
							
			
			
					
				
	
	- Create an Docker Application Image using Dockerfile!'
	
	- Container Registries!	
		


	
#######################
Day 13: 30th July 2025
#######################	

		Version Control Source Code					==> 	Artifactory Libraries 			==> 	Container Registries
		
			- GitHub/AzRepos								- Jfrog/AzArtifact						- DockerHub/AzContainer Registry
			
				mywebapp.jsp_v1.1					==>		    mywebapp.war_v1.1			==> 	   mywebapp-Img_v1.1	
				mywebapp.jsp_v1.2					==>		    mywebapp.war_v1.2			==> 	   mywebapp-Img_v1.2				
				mywebapp.jsp_v1.3					==>		    mywebapp.war_v1.3			==> 	   mywebapp-Img_v1.3				
		
		
	
	Virtual Machines :
		
		- VMs are called as Hardware Level Virtualization
		- VMs are created using Hypervisor 
		- VMs are used to execute the Operating System and its applications
		- VMs will be up and running, even if there is no active task/application
		- VMs consume more time and space to start the application service
		
	
	Containers :
	
		- Containers are called as OS Level Virtualization
		- Containers are created using Container Engine
		- Containers are used to execute the Applications/Tasks
		- Containers will immediately go to exit/stop state if there is no active task/application
		- Containers consume les time and space to start the application service

			- Containers uses underlying properties of Operating System :
			
				- Namespace 
				- Control Groups 
				
		- Using Containers we can reduce the no. of VMs. But we not completely eliminate VMs.
				
		Terminologies :
		
			- Container Engine 			# To Create/Manage the Containers
			
			- Container Image 	
							- It is static file that composed of various layers 
							- Non-Executable 
							- Dockerfile - composed of various Instructions to build an Image.
							
			- Container
							- Executable entity of Container Images 

							
			- Container Registry 
							- Version Control / Maintain the Container Images 
							- (DockerHub/ACR)
							
			
			- Container Repository
			
							- Subset of Container Registry
		
	


	- Create Container Images!
	
		- Infra-Structure Perspective :
			
			- docker commit :::			# Used to Create Server templates!
			
				- Is used to create a container image based on existing container reference.
				
				Syntax:
				
					docker commit <Container_id> <Container_Repo_Name>/Image_name:<tag>
				
				Eg.: 
					docker commit 6e05485c5a2b loksaieta/sk-azimg:v1.0



		- Developers/Deployment :

			- docker build :
			
				- Is used to create a container image based on Dockerfile reference.
				- Dockerfile will be created by the Developers and maintained in the Source Code Repositories
				- Dockerfile composed of various instruction to create the layers of Container Image 

				Syntax: 
				
					docker build -t <Container_Repo_Name>/Image_name:<tag> .		# '.' Denotes the Dockerfile reference
					
				Eg.: 
					docker build -t loksaieta/sk-azimg:v1.1 .

					- Prepare Dockerfile before executing the docker build command 
					
					
					
					vi Dockerfile 
					
					FROM ubuntu
					RUN apt update -y 
					RUN apt install git -y 
					RUN apt install maven -y 
		
		
					docker build -t loksaieta/sk-javawebappimg .
						
					Run the Container using port mapping :
					
						docker run -it -p 8085:8080 loksaieta/sk-javawebappimg

					
					
					
					
					
		- Containerization : 
		
			- Is a process of packaging the applications along with its dependencies.
			
			
			Dev Environment :
			
				- Create Source Code 
				- Create Application Artifacts 		mywebapp.war
			
			
	Developers' / Deployment Perspective :::
	
		Role :
		
			Dev Environment :
			
				- Create Source Code 
				
				- Build 				--> mywebapp.war 
				
				Using Containerization :
				
				Package the application : (mywebapp.war,jdk_v11,Tomcat_v8)	==> mywebapp_img:v1.0
				
				
				Publish the Container Image to Container Registry(DockerHub/ACR)
				
			QA-Test Server :
			
			
				pull Container Image from Container Registry(DockerHub/ACR)
				
				Create Application Container 
	

			UAT-Test Server :
			
			
				pull Container Image from Container Registry(DockerHub/ACR)
				
				Create Application Container 


			Prod-Test Server :
			
			
				pull Container Image from Container Registry(DockerHub/ACR)
				
				Create Application Container 				
	
		vi Dockerfile

		Write Dockerfile :::
		
			Docker File Instructions :::
			
			FROM 									# To Identify the Base Image
			RUN 									# To run the package manager
			COPY 									# To Copy the file from host volume to container volume
			CP 										# To Copy the file within the container volumes 
			ADD 									# To Copy the file from Host Volume as well as from URL
			ENV 									# To define the Environment Variable 
			ARG 									# To pass Arguements to the Steps in Dockerfile 
			EXPOSE									# To Define the Container Port 
			WORKDIR									# To set the current working directory within the Container 
			CMD										# To set the default start-up command to the container 
													  This Command can be changed at run-time.
			ENTRYPOINT								# To set the default start-up command to the container 
													  This Command cannot be changed at run-time.			
								
			
			
		Container Registries :
		
			- dockerhub 
			- ACR 
			- ECR 
			- GCR
			
	- Az Container Registries :
	
		- Create Az Container Registry 
		
		
		
	
	- Az Pipeline :::
	
		-> It is used to automate Application Builds and Deployments
		-> Az Pipelines can be created using classic manual process / thru scripts(*.yaml)

		--> 
		
			Build Pipeline Creates artifacts 
			
				0utput:  *.war 


	- Objectives of Pipeline Project :
	
		-> Java Maven Web Application Build 
	
			-> SCM_Checkout
			-> Use Maven to Build ==> pom.xml & maven goal 
			-> Unit 
			-> Publish the artifacts to the pipeline 
	
				
		-> Java Maven Web Application Build 
	
			-> SCM_Checkout
			-> Use Maven to Build ==> pom.xml & maven goal 
			-> Unit 
			-> Publish the artifacts to the pipeline 
			-> Use Docker to Create Application Image 
			-> Publish Application Image to Container Registries(ACR/DockerHub)
				
				
				
		-> Create Release Pipeline to Deploy the Changes to Target Servers 
				

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
	
- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'
	
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'mywebapp'
    publishLocation: 'Container'




#######################
Day 14: 31st July 2025
#######################	

	- Az Pipelines :
	
		- Agent Configurations!
		
			- Self Hosted Agents 
			
			- Managed Agents/Nodes 
			
		- Service Connections!	
		
			- Used to Connect any external service to Az Pipeline.
				Eg.: ACR/DockerHub/Github/Kubernetes Cluster/AKS/SonarQube-Server
				
				
	- CI 		===>		# Done usig Az Build Pipeline
							# Build, Unit Test, Containerize
							# Code Quality Analysis can be done using SonarQube Server
							
							# Promoted to High Environments / Initiate Release Pipeline!
	
	
	- Cd/CD 				# Done using Az Release Pipeline
							# Target Server :
								- Deployment Group 
								- Kubernetes Cluster (Micro-Service Based Application Services)
							# Enable Approvals to Prod Deployments	
								
								
		- Kubernetes ::::
		
			- Container Orchestration Tool!
			- Open Source - Kubernetes Architecture!	***
			
			Kubernetes & Terraform!		*** 
		
		
		- Agent Pool :
		
			- Is the collection of Az Build Agents(Server/VM)
			
			- Agents can be :
			
				- Self Hosted Agents 	- Managed by User 
				
				- Managed Agents/Nodes 	- Managed by Azure
										- This will be create at run time using IAC Tools like ARM 
										- VmImage :	<>		To Skin up the VM. 
										- Java Build Tools to be installed ?
											- 
											
		Environments :
		
			Non-Prod Environments 											Prod Environments 
			
				- Dev Environment 
					- Unit Test ==> 10 Test Cases 
					
				- Build Environment
								-> SCM_Checkout
								-> Use Maven to Build ==> pom.xml & maven goal 
								-> Unit Level Testing 
								-> Promote changes to higher environment
					
				- Target Environments 
					
					QA 
					
					UAT 						=============>					Production Servers 
										


		Configuration of Self Hosted Agents ::::
		
			1. Prepare the Virtual Machine with all the required build tools.
			
			2. Create Agent Pool :
				- go to project settings 
				- Azure Agent Pool 
					- add Agent 
					
				- Login to Az Portal & Create Azure User - PAT  
				
						Efgbz
						
						

			3. On the Agent Pool Page :
			
				- Click on new Agent :
				
				azureuser~:
				
				mkdir myagent
				
				cd myagent
				
				wget https://download.agent.dev.azure.com/agent/4.259.0/vsts-agent-linux-x64-4.259.0.tar.gz
				
				tar zxvf vsts-agent-linux-x64-4.259.0.tar.gz
				
				https://dev.azure.com/LoksaiETA-Orgn/
				
				
				ls 
				
				./config.sh 
				
Enter (Y/N) Accept the Team Explorer Everywhere license agreement now? (press enter for N) > Y

>> Connect:

Enter server URL > https://dev.azure.com/LoksaiETA-Orgn/
Enter authentication type (press enter for PAT) >
Enter personal access token > ************************************************************************************
Connecting to server ...

>> Register Agent:

Enter agent pool (press enter for default) > javabuildap1
Enter agent name (press enter for Javawebappbuildserver1) >
Scanning for tool capabilities.
Connecting to the server.
Successfully added the agent
Testing agent connection.
Enter work folder (press enter for _work) >
2025-07-31 02:43:45Z: Settings Saved.


devopsadmin@Javawebappbuildserver1:~/myagent$ ls
_diag  config.sh  externals     reauth.sh      run.sh  vsts-agent-linux-x64-4.259.0.tar.gz
bin    env.sh     license.html  run-docker.sh  svc.sh



devopsadmin@Javawebappbuildserver1:~/myagent$ ./run.sh
Scanning for tool capabilities.
Connecting to the server.
2025-07-31 02:47:01Z: Listening for Jobs
				
# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  name : 'javabuildap1'

steps:
- task: Maven@4
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: default
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'
	
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'mywebapp'
    publishLocation: 'Container'




# .Net Project!


# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'mywebapp'
    publishLocation: 'Container'



#######################
Day 15: 1st August 2025
#######################	
	
	- Create Azure Container Registries 
		- AzCR , DockerHub(Login to Dockerhub & Create PAT)
						docker login -u losdieta
						dasdfasdfE
	
	- Create Service Connection to Container Registry

	- AzPipeline to Containerize the Application Artifacts

	- Publish to Container Registries 
	
	- Work with Kubernetes to deploy the Containerized workload using Az CI/CD Pipelines.
	
	
	Az Release Pipeline!
	
	- To Deploy the Changes to the Target Environment 
	
		Target Environment :
		
			- Prod Deployment Servers(VM)	# Non-Containerized Workload.
			
			- Prod Deployment Servers(VM)	# Containerized Workload.
				- pull and run the application image in this VM
				- 1 instance of Container 
			
			- Kubernetes Cluster 			# Containerized Workload.
			
				- AKS 
				
				- On-prem Kubernetes Cluster 
					AWS Cloud 
					GCP 
					Az VM					
					
				- Kubernetes Architecture!
				- Kubernetes Components 
				- Kubernetes Terminologies/Concepts
				
				- Create Kubernetes Cluster using Open-Source - On-Prem	
				
				- Create Kubernetes Cluster using AKS / EKS / GKE
				
				- Kubernetes Developers 		
				- Kubernetes Administrators 
				- Kubernetes Security Admins
			
	
	-> Container Orchestration:
	
			- Docker Swarm 
				- Create replicas of containers and ensure high availability of containers
				- This cannot suppport Auto-Scaling & Load Balancing!
				- So, this is not recommended in Prod Environments.
				
			- Kubernetes 
				- Create replicas of containers/Pods and ensure high availability of containers
				- This suppport Auto-Scaling & Load Balancing!
					
				- Open-Source Kubernetes 

				- Managed Kubernetes Serices 
				
					- AKS/EKS/GKE
					
	-> Kubernetes Architecture:
	
		- Create Kubernetes Cluster using Open-Source - On-Prem	:
			- Create VMs in Az Cloud / AWS Cloud to Install and Configure Open-Source Kubernetes
			- kubeadm utility used to create Production grade Kubernetes Clusters 
			
			- Create Az Service Connection to attach the Kubernetes Cluster to Az Pipeline Project
			
			- Create CI/CD Pipeline!
			
		- Create Kubernetes Cluster using AKS :
			
	-> Azure Artifacts / Test Coverage using Azure Test Plan

		
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:

- task: Maven@4
  inputs:
    azureSubscription: 'Azure subscription 1(bf1aeccd-85bd-4d70-a583-65f6c8f7a4cb)'
    mavenPomFile: 'pom.xml'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false

- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'mywebapp'
    publishLocation: 'Container'

- task: Docker@2
  inputs:
    containerRegistry: 'skdhcr-sc1'
    command: 'login'

- task: Docker@2
  inputs:
    containerRegistry: 'skdhcr-sc1'
    repository: 'loksaieta/skazwebapp'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'
		
