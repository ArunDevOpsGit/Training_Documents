
SK
AZ-400 Training :

Start Date : 14th July 2025

######################
Day 1: 14th July 2025
######################

	- About DevOps 

	- Introduction to Azure DevOps Services 
	
	- Access Azure DevOps Services
	
	
	
Tools: VCS - GIT 
	
	- Micro-Service Based Application Architecture
	
	- Containerize the Micro-Services
	

What is DevOps ?

	Software Development Life Cycle - SDLC 
	
	Software Applications 
	
		- Desktop Applications
		- Web Applications
		- Mobile Applications
		- Embedded Applications 

		
	- Requirement Analysis 
	
	- Design and Documentation 
	
	- Code & Development
	
	- Testing 
	
	- Implementation to Production 
	
	- Monitor/Maintain

		- Desktop Applications
			==> Super-Market Application :
					Functions/Modules:
						--> Design User Interface 
						--> Stock Management 
						--> Database
						--> Billing 
						--> Payment 
								-> CASH 
								-> CARD 
									-> Online Payment 
									-> UPI 
				
Waterfall Model:
		- Top-Down Approach!
		- Linear in fashion 
		- Meant for Monolith Application Architecture
		
Main_Project :
			
	- Requirement Analysis 
	
	- Design and Documentation 
	
	- Code & Development					7th Month of the Project
	
	- Testing 
	
	- Implementation to Production 
	
	- Monitor/Maintain				


Enhancement_Project :
			
	- Requirement Analysis 
	
	- Design and Documentation 
	
	- Code & Development					
	
	- Testing 
	
	- Implementation to Production 
	
	- Monitor/Maintain		
	
	
	
AGILE Methodologies :

		- Desktop Applications
			==> Super-Market Application :
					Functions/Modules/Iterations:
						--> Design User Interface 
						--> Stock Management 
						--> Database
						--> Billing 
						--> Payment 
								-> CASH 
								-> CARD 
									-> Online Payment 
									-> UPI	

Iteration 1 : Design User Interface

	- Requirement Analysis 
	
	- Design and Documentation 
	
	- Code & Development					
	
	- Testing 
	
	- Implementation to Production with proper approvals
	
	- Monitor/Maintain		
	
Iteration 2 : Stock Management

	- Requirement Analysis 
	
	- Design and Documentation 
	
	- Code & Development					
	
	- Testing 
	
	- Implementation to Production with proper approvals
	
	- Monitor/Maintain		
	
	
Iteration nth : Payment: UPI/Online

	- Requirement Analysis 
	
	- Design and Documentation 
	
	- Code & Development					
	
	- Testing 
	
	- Implementation to Production with proper approvals
	
	- Monitor/Maintain	
	

	Using AGILE Methodologies, 
	
		we can able to achieve :
	
			- Continuous Development 
			- Continuous Integration
			- Continuous Testing 
			- Continuous Delivery 
					=> It is a process to release the changes to Production Environment
					=> Expects Manual approvals
				
		we cannot achieve 
		
			- Continuous Deployment
					=> It is a process to release the changes to Production Environment without any manual intervension/Approvals


				
	DevOps ::::
		
		- DevOps is the Software Development Strategies, which promotes the collaboration between the teams like Development Team and Operations Teams to achieve Continuous Development, Continuous Integration, Continuous Testing, Continuous Delivery, Continuous Deployment and Continuous Monitoring in more automated fashion.
	
	
	How to Implement DevOps ?
	
		- Identify the Teams involved in the process of SDLC :
		
			- DevOps Team 
				- Infra-Structure Management Team	--> Provision/Create IT Resource 
				- Application Development Team 
				- Testing Team 
				- Release Management Team 
				- Production Support Team 
				- Production Monitoring Team 
				- IT Security 
				
				
		- Environments:
		
			Non-Prod Environments											Production Environments
		
				- Dev 
				
				- Build 
				
				- Test 
					QA 
					UAT 					=================>					Production Servers 
	
		
		- Application Architecture :
		
			- Monolith Application Architecture :
			
				- Tightly Coupled 
				- All the functions of the Application are tighly coupled in nature 
				- Only Continuous Delivery can be possible with this Architecture
			
			- Micro-Service Based Architecture :
			
				- It is Loosely Coupled Application Architecture
				- Functions/Modules/Iterations ==> Micro-Service
				- The Entire Application is divided into Micro-Services 
				- These Micro-Services can be independently developed and implemented 
				- Using DevOps, Continuous Deployment can achieved without any downtime, only if it Micro-Service Based Application Architecture 
				
				
		- DevOps Stages :::
		
			- Continuous Development :
				- It is the capability of the Application Development Team to Continuously develop the changes and take it for further testing
				- It is used to improve the Developers' Productivity.
				
				Roles of Developer :
					- Create Source Code 
					
				In AGILE Methodologies :
				
					- Create Source Code 
					- Manual Build 
					- Create Artifacts 
					- Manual Unit Testing 
					- Promote the changes to Test Environment
					- Notify the Testing Team thru Emails 
				
				Using DevOps Approach :
				
					- Create Source Code 
					- Save the Code in the Source Code Repository (GITHUB/Azure Repos)
					
					Using DevOps Strategies :
					
					Automate :
					
					- Application Build 
						=> It is process of compiling the source code and creating artifacts(Binaries - *.war/*.jar/*.exec,*.dll)
					- Unit Testing 
					- Code Promotions 
					- Notifications


				Tools :
				
					- IDEs - Intergrated Development Environment - Eclipse,Visual Studio,Pycharm,Visual Studio Code
					- GITHUB/GitLab/Azure Repos/
					- Build Tools integrated with IDEs 
					
					
					
			- Continuous Integration :
				- It is the capability of the Application Development Team to Continuously integrate the changes for further testing				

					Using DevOps Strategies :
					
					Automate :
					
					- Application Build 
						=> It is process of compiling the source code and creating artifacts(Binaries - *.war/*.jar/*.exec,*.dll)
					- Unit Testing - 
					- Code Promotions to Test Environments
					- Notifications
					
				Tools :
				
					- IDEs - Intergrated Development Environment - Eclipse,Visual Studio,Pycharm,Visual Studio Code
					- GITHUB/GitLab/Azure Repos/
					- Build Tools integrated with IDEs 
					- Build Tools - Maven/Gradle/.NET SDK,Python - Junit
					- Build Orchestration Tools :
						- Azure Pipelines/Jenkins/Docker/Kubernetes/Ansible/GitHub Actions/Gitlab-ci

					
			
			- Continuous Testing :
				- It is the capability of the Testing Team to Continuously test the Changes without impacting other changes.
				
				Tools :
				
					- TestNG/Selenium/JUNIT
						- Azure Pipelines/Azure Test/Jenkins/Ansible/GitHub Actions/Gitlab-ci
		
		
Next :::		
			- Continuous Delivery / Continuous Deployment :
			
			- Continuous Monitoring :		
			
			
			- Infra-Structure Management
			
			- Azure DevOps Services 
			
	
			- Create github Account : 	
	
	
######################
Day 2: 15th July 2025
######################	
	
	- Continuous Delivery / Continuous Deployment :	
	
		- Both Continuous Delivery & Continuous Deployment process are used to release the changes to Production Environments.
	
			- Continuous Delivery 
					=> It is a process to release the changes to Production Environment
					=> Expects Manual approvals
					=> Meant for Monolith Applications
					=> During Continuous Delivery, Application Downtime is expected.

				Eg.: 
				
					Banking/Insurance/Stock_Market  --> Legacy Applications
					
					Online Banking / Transations 
					
					- Application Release/Deployment Window ==> 4Hr - 6Hrs
					
						-> Fix 
						-> Revert!
				
			- Continuous Deployment
					=> It is a process to release the changes to Production Environment without any manual intervension/Approvals
					=> Micro-Service based Applications Architecture are required to achieve Continuous Deployment
					=> Changes can be implemented without any downtime. 
					=> Achieve ZERO Downtime.
			
				Eg.: 
					
					Netflix/Amazon/facebook/google
					
					
				
					
	www.amazon.com :
	
		sign-up			==> Micro-Service1 => Developer1 => Code,Unit Test,promote for further testing-> Release to Prod	
		sign-in			==> Micro-Service2
		search
		add to cart 
		place the order 
		payment 
		confirm order 
		track 
		
			- Tools: 
				- Azure Pipelines/Jenkins/Gitlab-ci/GitHub-Actions  
				- Docker/Kubernetes/ACS/ACR/AKS
			
			- CI/CD : Continuous Integration/Continuous Delivery/Deployment
			
				CI/Cd 
				CD/CD
				
	- Continuous Monitoring :::
	
		- Process of Continuously Monitoring the Production Environments and Applications to ensure Zero-Downtime and Business Continuity.
		
		
			Production Servers ==> 5 Prod Servers 
			
			CPU		=> Utilization
			Memory  => Utilization
			
		
		- Monitoring Tools :
		
			- Infra-Structure Monitor Tools 
				-> Azure Monitor/AWS Cloud Watch/Prometheus/Grafana/Dynatrace/Splunk/Nagios 
				
				-> Threshold Limit => 70% of CPU Utilization
				-> Alerts Manager
				
			
			
	- Infra-Structure Management :::

		- Provision/Create the IT Resources 
		
		- Configure the IT Resources 
		
		
		IAC(Infra-Structure As Code) Tools :
		
			-> ARM(Az Resource Manager) / Terraform / AWS Cloudformation
			-> Ansible/Chef/Puppet - Configuration Management Tools
				
				
	DevOps :
	
		Tools :
		
			Open-Source DevOps Tools :
				GITHUB/Jenkins/Docker/Kubernetes/Ansible/Terraform			
			
			
			Managed Services : IAAS/PAAS/SAAS
			
				Azure DevOps Services
					- Azure Boards 
					- Azure Repos
					- Azure Pipelines 
					- Azure Test 
					- Azure Artifacts
					
				AWS Developer Tools : AWS CodeCommit/CodeBuild/CodeDeploy/CodePipeline
				
		
	DevOps is all about :
	
		- People 
		- Process
		- Tools 
		
		Detailed DevOps Assessment!
		
		
		Waterfall/Agile/DevOps/DevSecOps/GitOps/MLOps/AIOps/SRE....
		
		
	- Working with Azure DevOps Services :::


	- Introduction to Azure DevOps Services ::::
	
		Azure DevOps Services
			- Azure Boards 
			- Azure Repos
			- Azure Pipelines 
			- Azure Test 
			- Azure Artifacts
		
		ALM Tool - Application LifeCycle Management Tool --> Jira

		
	Pre-requisites!
	
		- Git Repository Management :::
			- Fundamentals
	
		- Create GITHUB Account 				
			# https://github.com/
		
		- Create Azure Account - Free Tier
		
			# https://portal.azure.com/signin/index/			# To Create Azure Account 
			
				-> Active Email_ID
				-> Active Mobile_Number 
				-> Active Credit/Debit Cards - User Authencation purpose - enabled with International Transations.

			Free Account is eligible for 12 Months 
			
			$200 for initial 1 Month. 
			
			From 2nd Month, it will be Pay-As-You-Go Model for some service.
			
		https://aex.dev.azure.com/					# Azure DevOps Portal	
			
		- Install Visual Studio Code in Local Machine
			# https://code.visualstudio.com/download				
		
		- Create DockerHub Account
			# https://hub.docker.com/
		
		
Next :::

	- Git Repository Management :::
		- Fundamentals	
		
	- Overview of Azure Portal and DevOps Dashboard 
	
		Azure DevOps Services
			- Azure Boards 
			
			
			- Azure Repos
			- Azure Pipelines 
			- Azure Test 
			- Azure Artifacts					

			
			

######################
Day 3: 16th July 2025
######################	


	- Version Control System :::
	
		- It is used to Version Control the Source Code Changes
		- It is used to Track the Source Code Changes
		
		
	Developer :
	
	Create Source Code in Local Machine:
	
	Open index.html 
	
	<html>
	-
	-
	-
	--
	-
	---
	</html>
	
	Save & Test index.html 

	Open index.html 
	
	<html>
	-
	-
	-qqq
	--qqqq
	-dfsdfadf
	adf
	adadfsd
	---
	</html>	
		
	Save & Test index.html 
	
	VCS :

	Open index.html 
	
	<html>
	-
	-
	-
	--
	-
	---
	</html>			
			

	Save & Test index.html 			===> index.html_v1.0	
		
	Open index.html 
	
	<html>
	-
	-
	-qqq
	--qqqq
	-dfsdfadf
	adf
	adadfsd
	---
	</html>	
		
	Save & Test index.html			===> index.html_v1.1			#	Tag/Version_Number/Commit_ID			
	Save & Test index.html			===> index.html_v1.2
	Save & Test index.html			===> index.html_v1.3
	Save & Test index.html			===> index.html_v1.4
	Save & Test index.html			===> index.html_v1.5
	
	
Version Control Source Code :::	GitHub/Azure Repos 			 Artifacts : Jfrog/Azure Artifacts 		 Docker/ACS/DockerHub/ACR

Save & Test index.html			===> index.html_v1.1	===> mywebapp.war_v1.1					===> mywebapp_img:v1.1				
Save & Test index.html			===> index.html_v1.2    ===> mywebapp.war_v1.2                  ===> mywebapp_img:v1.2
Save & Test index.html			===> index.html_v1.3    ===> mywebapp.war_v1.3                  ===> mywebapp_img:v1.3
Save & Test index.html			===> index.html_v1.4    ===> mywebapp.war_v1.4                  ===> mywebapp_img:v1.4
Save & Test index.html			===> index.html_v1.5	===> mywebapp.war_v1.5                  ===> mywebapp_img:v1.5


What is GIT ?

	- Git is Open-Source Distributed Version Control System 
	- It is used to Version the Source Code Changes 
	- It is used to Track the Source Code Changes 
	- It is used to perform parallel development using git Branching Techniques
	

	GIT/GitHub ?

		- Git is a client installed in the Local Machine
		- GitHub is a Remote Repository Server - To Create Remote Git Repositories (GitHub/Azure Repos)
		
		
	Three Types of VCS :

		- Local VCS 			: Within the Local Machine meant for Single User
		
		- Centralized VCS 
		
		- Distributed VCS 
		
		
	Working with Git :
	
	- Create Account in GitHub/Azure_Repo/GitLab

	- Install git client in Local Machine 
	
	
	- Git File Workflow :
	
	- Git Misc Cli Command :
	
	- Git Branching Techniques/Strategies :
	
	- Handle Remote Repositories(Azure Repositories) :
	
	
	- Git File Workflow :	
	
	
	Local Machine 																						Remote Repository Server 
	
	
	Working Directory 					Stage_Area						Local Git Repository				Remote Repository
	
	index.html 		 ================>	index.html  =================>	index.html_V1.0		 ==============>	index.html_V1.0
						git add 						git commit								git push
	
	
	
	Developers' Workload :
	
	- Enhancement / Bug_Fixing Project 
	
	- New Project 
	
	
	
	
	git clone 				# To Clone/Copy the entire Remote Repository to Local Machine 
	
	git add 				# To Add the Changes from Working Directory to Staging Area 
	
	git commit 				# To Commit the Changes from Staging Area to Local Repository
	
	git Push 				# To push the Changes from Local Repository to Remote Repository
	
	git fetch/git pull 
	
		# Both git fetch and git pull are used to handle the incremental changes from Repositories.
		
		git fetch 	
			- It is just to check for incremental changes in Remote Repository. If there is any incremental changes exist, get fetch will update the details of the incremental changes in the Local Repository. It will never update the Changes in Working Directory.
			
		git pull 	
			- It will check for incremental changes in Remote Repository. If there is any incremental changes exist, get pull will update the details of the incremental changes in the Local Repository as well as the changes gets updated in the Working Directory.
			
			git pull => git fetch + git merge
 
			# It is used keep the local Repository in-sync with remote repository
			
			
######################
Day 3: 16th July 2025
######################	


	- Version Control System :::
	
		- It is used to Version Control the Source Code Changes
		- It is used to Track the Source Code Changes
		
		
	Developer :
	
	Create Source Code in Local Machine:
	
	Open index.html 
	
	<html>
	-
	-
	-
	--
	-
	---
	</html>
	
	Save & Test index.html 

	Open index.html 
	
	<html>
	-
	-
	-qqq
	--qqqq
	-dfsdfadf
	adf
	adadfsd
	---
	</html>	
		
	Save & Test index.html 
	
	VCS :

	Open index.html 
	
	<html>
	-
	-
	-
	--
	-
	---
	</html>			
			

	Save & Test index.html 			===> index.html_v1.0	
		
	Open index.html 
	
	<html>
	-
	-
	-qqq
	--qqqq
	-dfsdfadf
	adf
	adadfsd
	---
	</html>	
		
	Save & Test index.html			===> index.html_v1.1			#	Tag/Version_Number/Commit_ID			
	Save & Test index.html			===> index.html_v1.2
	Save & Test index.html			===> index.html_v1.3
	Save & Test index.html			===> index.html_v1.4
	Save & Test index.html			===> index.html_v1.5
	
	
Version Control Source Code :::	GitHub/Azure Repos 			 Artifacts : Jfrog/Azure Artifacts 		 Docker/ACS/DockerHub/ACR

Save & Test index.html			===> index.html_v1.1	===> mywebapp.war_v1.1					===> mywebapp_img:v1.1				
Save & Test index.html			===> index.html_v1.2    ===> mywebapp.war_v1.2                  ===> mywebapp_img:v1.2
Save & Test index.html			===> index.html_v1.3    ===> mywebapp.war_v1.3                  ===> mywebapp_img:v1.3
Save & Test index.html			===> index.html_v1.4    ===> mywebapp.war_v1.4                  ===> mywebapp_img:v1.4
Save & Test index.html			===> index.html_v1.5	===> mywebapp.war_v1.5                  ===> mywebapp_img:v1.5


What is GIT ?

	- Git is Open-Source Distributed Version Control System 
	- It is used to Version the Source Code Changes 
	- It is used to Track the Source Code Changes 
	- It is used to perform parallel development using git Branching Techniques
	

	GIT/GitHub ?

		- Git is a client installed in the Local Machine
		- GitHub is a Remote Repository Server - To Create Remote Git Repositories (GitHub/Azure Repos)
		
		
	Three Types of VCS :

		- Local VCS 			: Within the Local Machine meant for Single User
		
		- Centralized VCS 
		
		- Distributed VCS 
		
		
	Working with Git :
	
	- Create Account in GitHub/Azure_Repo/GitLab

	- Install git client in Local Machine 
	
	
	- Git File Workflow :
	
	- Git Misc Cli Command :
	
	- Git Branching Techniques/Strategies :
	
	- Handle Remote Repositories(Azure Repositories) :
	
	
	- Git File Workflow :	
	
	
	Local Machine 																						Remote Repository Server 
	
	
	Working Directory 					Stage_Area						Local Git Repository				Remote Repository
	
	index.html 		 ================>	index.html  =================>	index.html_V1.0		 ==============>	index.html_V1.0
						git add 						git commit								git push
	
	
	
	Developers' Workload :
	
	- Enhancement / Bug_Fixing Project 
	
	- New Project 
	
	
	
	
	git clone 				# To Clone/Copy the entire Remote Repository to Local Machine 
	
	git add 				# To Add the Changes from Working Directory to Staging Area 
	
	git commit 				# To Commit the Changes from Staging Area to Local Repository
	
	git Push 				# To push the Changes from Local Repository to Remote Repository
	
	git fetch/git pull 
	
		# Both git fetch and git pull are used to handle the incremental changes from Repositories.
		
		git fetch 	
			- It is just to check for incremental changes in Remote Repository. If there is any incremental changes exist, get fetch will update the details of the incremental changes in the Local Repository. It will never update the Changes in Working Directory.
			
		git pull 	
			- It will check for incremental changes in Remote Repository. If there is any incremental changes exist, get pull will update the details of the incremental changes in the Local Repository as well as the changes gets updated in the Working Directory.
			
			git pull => git fetch + git merge
 
			# It is used keep the local Repository in-sync with remote repository
	
	Fork 					# # To Copy the one entire Remote Repository to Another Remote Repository 
	
		
		
		
	- Git Branching Techniques/Strategies :
	
		- Git Branch is a logical copy of a repository's default branch
		
		- It is used to perform parallel development
		
		- Any git repository is based on Branch called default branch - main/master
		
		- Branching Strategies are used to Maintain the integrity of Master/Main Branch. *************
		
	
	Scenario 1: 
	
		Repo1 :
		
			master : c1,c2,c3		==> index.html		$ refers to Prod Version 
			
				feature1_Branch : c1,c2,c3 	==> index.html
				
						c1,c2,c3,f1cm1,f1cm2,f1cm3


	Scenario 2: 	
	
		Repo1 :
		
			master : c1,c2,c3		==> index.html		$ refers to Prod Version 
			
						c1,c2,c3,c4								# c4 - changes merged from Developer_Branch
			
				Developer_Branch : c1,c2,c3
				
							c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3				# Upon Merging changes from feature1 & feature2
				
					feature1_Branch : c1,c2,c3 	==> index.html

							c1,c2,c3,f1cm1,f1cm2,f1cm3
							
					feature2_Branch : c1,c2,c3 	==> index.html

							c1,c2,c3,f2cm1,f2cm2,f2cm3
						
						
	Scenario 3: 	
	
		Repo1 :
		
			master : c1,c2,c3		==> index.html		$ refers to Prod Version 
			
						c1,c2,c3,c4								# c4 - changes merged from Integration_Branch					
						
				Integration_Branch : c1,c2,c3
			
							c1,c2,c3,Developer1_Changes,Developer2_Changes		# Upon Merging changes from Developer1 & Developer2
			
					Developer1_Branch : c1,c2,c3
					
								c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon Merging changes from feature1 & feature2
					
						feature1_Branch : c1,c2,c3 	==> index.html

								c1,c2,c3,f1cm1,f1cm2,f1cm3
								
						feature2_Branch : c1,c2,c3 	==> index.html

								c1,c2,c3,f2cm1,f2cm2,f2cm3
								
					Developer2_Branch : c1,c2,c3
					
								c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon Merging changes from feature1 & feature2
					
						feature1_Branch : c1,c2,c3 	==> index.html

								c1,c2,c3,f1cm1,f1cm2,f1cm3
								
						feature2_Branch : c1,c2,c3 	==> index.html

								c1,c2,c3,f2cm1,f2cm2,f2cm3
								

	Scenario 4: 	
	
		Repo1 :
		
			master : c1,c2,c3		==> index.html		$ refers to Prod Version 
			
						c1,c2,c3,c4								# c4 - changes merged from Release_Branch	


				Release_Branch : c1,c2,c3	

							c1,c2,c3,Team1_Changes,Team2_Changes
				
						
					Integration_Branch1 : c1,c2,c3																	# Team1
				
								c1,c2,c3,Developer1_Changes,Developer2_Changes		# Upon Merging changes from Developer1 & Developer2
				
						Developer1_Branch : c1,c2,c3
						
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon Merging changes from feature1 & feature2
						
							feature1_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f1cm1,f1cm2,f1cm3
									
							feature2_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f2cm1,f2cm2,f2cm3
									
						Developer2_Branch : c1,c2,c3	
						
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon Merging changes from feature1 & feature2
						
							feature1_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f1cm1,f1cm2,f1cm3
									
							feature2_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f2cm1,f2cm2,f2cm3


					Integration_Branch2 : c1,c2,c3																	# Team2
				
								c1,c2,c3,Developer1_Changes,Developer2_Changes		# Upon Merging changes from Developer1 & Developer2
				
						Developer1_Branch : c1,c2,c3
						
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon Merging changes from feature1 & feature2
						
							feature1_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f1cm1,f1cm2,f1cm3
									
							feature2_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f2cm1,f2cm2,f2cm3
									
						Developer2_Branch : c1,c2,c3	
						
									c1,c2,c3,f1cm1,f1cm2,f1cm3,f2cm1,f2cm2,f2cm3	# Upon Merging changes from feature1 & feature2
						
							feature1_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f1cm1,f1cm2,f1cm3
									
							feature2_Branch : c1,c2,c3 	==> index.html

									c1,c2,c3,f2cm1,f2cm2,f2cm3
									
									
Next :

	- Install git client in Local Machine 

	- VS Code to work with Git Repos
	
	- Handle Remote Azure Repos	
					
	
	
	
